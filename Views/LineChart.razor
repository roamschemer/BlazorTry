@page "/linechartpage"
@using ChartJs.Blazor
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Util
@using System.Drawing
@using System.Collections.Generic
@using BlazorTry.Utils
@using BlazorTry.Extends

<h3>LineChart</h3>

<Chart Config="_config" @ref="_chart"></Chart>

<button @onclick="RandomizeData">Randomize Data</button>
<button @onclick="AddDataset">Add Dataset</button>
<button @onclick="RemoveDataset">Remove Dataset</button>
<button @onclick="AddData">Add Data</button>
<button @onclick="RemoveData">Remove Data</button>

@code {
    private const int InitalCount = 7;
    private LineConfig _config;
    private Chart _chart;

    protected override void OnInitialized() {
        _config = new LineConfig {
            Options = new LineOptions {
                Responsive = true,
                Title = new OptionsTitle {
                    Display = true,
                    Text = "ChartJs.Blazor Line Chart"
                },
                Tooltips = new Tooltips {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Month"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                }
            }
        };

        IDataset<int> dataset1 = new LineDataset<int>(SampleUtils.RandomScalingFactor(InitalCount)) {
            Label = "My first dataset",
            BackgroundColor = ColorUtil.FromDrawingColor(SampleUtils.ChartColors.Red),
            BorderColor = ColorUtil.FromDrawingColor(SampleUtils.ChartColors.Red),
            Fill = FillingMode.Disabled
        };

        IDataset<int> dataset2 = new LineDataset<int>(SampleUtils.RandomScalingFactor(InitalCount)) {
            Label = "My second dataset",
            BackgroundColor = ColorUtil.FromDrawingColor(SampleUtils.ChartColors.Blue),
            BorderColor = ColorUtil.FromDrawingColor(SampleUtils.ChartColors.Blue),
            Fill = FillingMode.Disabled
        };

        _config.Data.Labels.AddRange(SampleUtils.Months.Take(InitalCount));
        _config.Data.Datasets.Add(dataset1);
        _config.Data.Datasets.Add(dataset2);
    }

    private void RandomizeData() {
        foreach (IDataset<int> dataset in _config.Data.Datasets) {
            int count = dataset.Count;
            dataset.Clear();
            dataset.AddRange(SampleUtils.RandomScalingFactor(count));
        }

        _chart.Update();
    }

    private void AddDataset() {
        string color = ColorUtil.FromDrawingColor(SampleUtils.ChartColors.All[_config.Data.Datasets.Count % SampleUtils.ChartColors.All.Count]);
        IDataset<int> dataset = new LineDataset<int>(SampleUtils.RandomScalingFactor(_config.Data.Labels.Count)) {
            Label = $"Dataset {_config.Data.Datasets.Count}",
            BackgroundColor = color,
            BorderColor = color,
            Fill = FillingMode.Disabled
        };

        _config.Data.Datasets.Add(dataset);
        _chart.Update();
    }

    private void RemoveDataset() {
        IList<IDataset> datasets = _config.Data.Datasets;
        if (datasets.Count == 0)
            return;

        datasets.RemoveAt(datasets.Count - 1);
        _chart.Update();
    }

    private void AddData() {
        if (_config.Data.Datasets.Count == 0)
            return;

        string month = SampleUtils.Months[_config.Data.Labels.Count % SampleUtils.Months.Count];
        _config.Data.Labels.Add(month);

        foreach (IDataset<int> dataset in _config.Data.Datasets) {
            dataset.Add(SampleUtils.RandomScalingFactor());
        }

        _chart.Update();
    }

    private void RemoveData() {
        if (_config.Data.Datasets.Count == 0 ||
            _config.Data.Labels.Count == 0) {
            return;
        }

        _config.Data.Labels.RemoveAt(_config.Data.Labels.Count - 1);

        foreach (IDataset<int> dataset in _config.Data.Datasets) {
            dataset.RemoveAt(dataset.Count - 1);
        }

        _chart.Update();
    }
}
